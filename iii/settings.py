"""
Django settings for iii project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from re import T

from decouple import config

# Twilio API
TEMPLATES_ID = config("template_id")
ACCOUNT_SID = config("account_sid")
AUTH_TOKEN = config("auth_token")
FROM_ = config("from_")


# Sendgrid Email API
SENDGRID_API_KEY = config("SENDGRID_API_KEY")
CLIENT_EMAIL = config("client_email_address")
TEMPLATE_ID = config("template_id")
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"
SENDGRID_SANDBOX_MODE_IN_DEBUG = True
SENDGRID_ECHO_TO_STDOUT = True

# stripe API keys
PAYMENT_HOST = "https://django-e-commrace.vercel.app/checkout/stripe_webhook"
PAYMENT_USES_SSL = True
PUBLISHABLE_KEY = config("Publishable_key")
STRIPE_SECRET_KEY = config("Secret_Key")
ENDPOINT_SIGNING_SECRET = config("STRIPE_SIGNING_SECRET")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
if DEBUG:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "localhost",
        # f"{config('EC2_PUBLIC_IPV4')}",
        "diverse-intense-whippet.ngrok-free.app",
    ]
else:
    ALLOWED_HOSTS = [
        "osama11111.pythonanywhere.com",
        f"{config('EC2_PUBLIC_IPV4')}",
        "diverse-intense-whippet.ngrok-free.app",
        "localhost",
        "127.0.0.1",
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "i",
    "Homepage",
    "blog",
    "cart",
    "checkout",
    "cv_api",
    "django_extensions",
    # "django_htmx",
    "crispy_forms",
    "crispy_bootstrap5",
    "django_bootstrap5",
    "cloudinary_storage",
    "cloudinary",
    # "ckeditor",
    "book_",
    "django_twilio",
    "axes",
    "phonenumber_field",
    "django_countries",
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # comment it if X-FRAME OPTION is None
    "axes.middleware.AxesMiddleware",
]

ROOT_URLCONF = "iii.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    }
]
WSGI_APPLICATION = "iii.wsgi.application"


# Database
if not DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": config("AMAZON_POSTGRES_DATABASE"),
            "USER": config("AMAZON_POSTGRES_USER"),
            "PASSWORD": config("AMAZON_POSTGRES_PASSWORD"),
            "HOST": config("AMAZON_POSTGRES_HOST"),
            "PORT": "5432",
            "OPTIONS": {
                "sslmode": "require",
                "options": "-c statement_timeout=60000",
            },
        }
    }


# CACHES = {
#     "default": {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379",
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        #'OPTIONS': {
        #'min_length': 12,
        # },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
if DEBUG:
    # STATICFILES_DIRS is for directories where Django will search for additional static files
    # that aren't tied to any specific app. These files can be served during development.
    # STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    MEDIA_URL = "/media/"

else:
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
    AWS_S3_CUSTOM_DOMAIN = (
        f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
    )
    AWS_S3_VERIFY = True
    AWS_S3_SIGNATURE_NAME = "s3v4"
    # AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
        "StorageClass": "STANDARD",
    }

    # Static and Media File Storage
    STATIC_LOCATION = "static"
    MEDIA_LOCATION = "media"

    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIA_LOCATION}/"

    STORAGES = {
        "default": {
            "BACKEND": "iii.custom_storage_backend.PublicMediaStorage",
        },
        "staticfiles": {
            "BACKEND": "iii.custom_storage_backend.StaticStorage",
        },
    }


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "Homepage.CustomUser"
LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/login/"
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
# CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"

################################Session and Cookie Settings#######################################33
SESSION_COOKIE_AGE = 7200000
SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True


###########################----------Security Related Settings-----------########################################

# Uncomment these settings only in production
if not DEBUG:
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = "DENY"
    SECURE_SSL_REDIRECT = True
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")


###############################-----------Set Login rate limit For Users-------------#############################
SILENCED_SYSTEM_CHECKS = ["axes.W003"]
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 2  # Number of login attempts allowed before blocking
AXES_LOCK_OUT_AT_FAILURE = True
AXES_USERNAME_FORM_FIELD = "email"
AXES_LOCKOUT_PARAMETERS = ["ip_address", ["username", "user_agent"]]
AXES_LOCKOUT_CALLABLE = "Homepage.views.custom_lockout"
AXES_RESET_ON_SUCCESS = True
AXES_COOLOFF_TIME = 0.05
AXES_ENABLE_ACCESS_FAILURE_LOG = True
AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",
    "django.contrib.auth.backends.ModelBackend",
]
# AXES_CACHE = "default"

# # For Django under Nginx on Amazon EC2 instance (VPC)
# # The number of reverse proxies in front of Django as an integer
AXES_IPWARE_PROXY_COUNT = 1
AXES_IPWARE_META_PRECEDENCE_ORDER = (
    "HTTP_X_FORWARDED_FOR",
    "REMOTE_ADDR",
    "HTTP_X_REAL_IP",
)

# For Django under Ngrok and (Ngrok + VPN)
# The number of reverse proxies in front of Django as an integer
# AXES_IPWARE_PROXY_COUNT = 0
# AXES_IPWARE_META_PRECEDENCE_ORDER = (
#     "HTTP_X_FORWARDED_FOR",
#     "REMOTE_ADDR",
#     "HTTP_X_REAL_IP",
# )

# # For Django under Pythonanywhere.com only
# AXES_IPWARE_PROXY_COUNT = 0
# # Use HTTP_X_REAL_IP only for pythonanywhere; Nginx is used as load balancer
# AXES_IPWARE_META_PRECEDENCE_ORDER = ["HTTP_X_REAL_IP"]

###################------------------- Google api-client library settings----------------############
GOOGLE_OAUTH_CLIENT_ID = config("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_OAUTH_CLIENT_SECRET = config("GOOGLE_OAUTH_CLIENT_SECRET")
if DEBUG:
    GOOGLE_OAUTH_REDIRECT_URI = (
        "https://diverse-intense-whippet.ngrok-free.app/accounts/google/login/callback/"
    )
else:
    GOOGLE_OAUTH_REDIRECT_URI = (
        "https://osama11111.pythonanywhere.com/accounts/google/login/callback/"
    )


#################-------- csrf settings ----------------######################################
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        "https://diverse-intense-whippet.ngrok-free.app",
        "http://127.0.0.1",
        "http://localhost",
    ]
else:
    CSRF_TRUSTED_ORIGINS = [
        "https://diverse-intense-whippet.ngrok-free.app",
        "https://osama11111.pythonanywhere.com",
    ]


###############################Cloudinary Settings For Image Storage###########################

# For cloudinary_storage library only
if DEBUG:
    CLOUDINARY_STORAGE = {
        "CLOUD_NAME": config("CLOUDINARY_CLOUD_NAME"),
        "API_KEY": config("CLOUDINARY_API_KEY"),
        "API_SECRET": config("CLOUDINARY_API_SECRET"),
        # "API_PROXY": "http://proxy.server:3128",
    }
else:
    CLOUDINARY_STORAGE = {
        "CLOUD_NAME": config("CLOUDINARY_CLOUD_NAME"),
        "API_KEY": config("CLOUDINARY_API_KEY"),
        "API_SECRET": config("CLOUDINARY_API_SECRET"),
        "API_PROXY": "http://proxy.server:3128",
    }

# For cloudinary python SDK
import cloudinary

CLOUDINARY_CLOUD_NAME = config("CLOUDINARY_CLOUD_NAME")
CLOUDINARY_API_KEY = config("CLOUDINARY_API_KEY")
CLOUDINARY_API_SECRET = config("CLOUDINARY_API_SECRET")
if DEBUG:
    cloudinary.config(
        cloud_name=CLOUDINARY_CLOUD_NAME,
        api_key=CLOUDINARY_API_KEY,
        api_secret=CLOUDINARY_API_SECRET,
    )
else:
    cloudinary.config(
        cloud_name=CLOUDINARY_CLOUD_NAME,
        api_key=CLOUDINARY_API_KEY,
        api_secret=CLOUDINARY_API_SECRET,
        api_proxy="http://proxy.server:3128",
        secure=True,  # Enforces HTTPS
    )
# MEDIA_URL = "/media/"
# DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"


####################---Allauth settings for social account login ----######################
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "CLIENT_ID": config("GOOGLE_OAUTH_CLIENT_ID"),
        "SECRET": config("GOOGLE_OAUTH_CLIENT_SECRET"),
    }
}


# provide error detail for django axes
if not DEBUG:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
            },
        },
        "root": {
            "handlers": ["console"],
            "level": "DEBUG",
        },
        "loggers": {
            "axes": {
                "handlers": ["console"],
                "level": "DEBUG",  # Set the level to ERROR to suppress AXES logs
                "propagate": True,
            },
        },
    }
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {message}",
                "style": "{",
            },
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "django_file": {
                "level": "ERROR",
                "class": "logging.FileHandler",
                "filename": "/home/testuser/E-commrace/E-Commrace/logs/django.log",
                "formatter": "verbose",
            },
            "axes_file": {
                "level": "ERROR",
                "class": "logging.FileHandler",
                "filename": "/home/testuser/E-commrace/E-Commrace/logs/axes.log",
                "formatter": "verbose",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["django_file"],
                "level": "ERROR",
                "propagate": False,
            },
            "axes": {
                "handlers": ["axes_file"],
                "level": "ERROR",
                "propagate": False,
            },
        },
    }


################----------CKeditor seetings-------------##############################################
# CKEDITOR_CONFIGS = {
#     "default": {
#         "skin": "moono",
#         # 'skin': 'office2013',
#         "toolbar_Basic": [["Source", "-", "Bold", "Italic"]],
#         "toolbar_YourCustomToolbarConfig": [
#             {
#                 "name": "document",
#                 "items": [
#                     "Source",
#                     "-",
#                     "Save",
#                     "NewPage",
#                     "Preview",
#                     "Print",
#                     "-",
#                     "Templates",
#                 ],
#             },
#             {
#                 "name": "clipboard",
#                 "items": [
#                     "Cut",
#                     "Copy",
#                     "Paste",
#                     "PasteText",
#                     "PasteFromWord",
#                     "-",
#                     "Undo",
#                     "Redo",
#                 ],
#             },
#             {"name": "editing", "items": ["Find", "Replace", "-", "SelectAll"]},
#             {
#                 "name": "forms",
#                 "items": [
#                     "Form",
#                     "Checkbox",
#                     "Radio",
#                     "TextField",
#                     "Textarea",
#                     "Select",
#                     "Button",
#                     "ImageButton",
#                     "HiddenField",
#                 ],
#             },
#             "/",
#             {
#                 "name": "basicstyles",
#                 "items": [
#                     "Bold",
#                     "Italic",
#                     "Underline",
#                     "Strike",
#                     "Subscript",
#                     "Superscript",
#                     "-",
#                     "RemoveFormat",
#                 ],
#             },
#             {
#                 "name": "paragraph",
#                 "items": [
#                     "NumberedList",
#                     "BulletedList",
#                     "-",
#                     "Outdent",
#                     "Indent",
#                     "-",
#                     "Blockquote",
#                     "CreateDiv",
#                     "-",
#                     "JustifyLeft",
#                     "JustifyCenter",
#                     "JustifyRight",
#                     "JustifyBlock",
#                     "-",
#                     "BidiLtr",
#                     "BidiRtl",
#                     "Language",
#                 ],
#             },
#             {"name": "links", "items": ["Link", "Unlink", "Anchor"]},
#             {
#                 "name": "insert",
#                 "items": [
#                     "Image",
#                     "Flash",
#                     "Table",
#                     "HorizontalRule",
#                     "Smiley",
#                     "SpecialChar",
#                     "PageBreak",
#                     "Iframe",
#                 ],
#             },
#             "/",
#             {"name": "styles", "items": ["Styles", "Format", "Font", "FontSize"]},
#             {"name": "colors", "items": ["TextColor", "BGColor"]},
#             {"name": "tools", "items": ["Maximize", "ShowBlocks"]},
#             {"name": "about", "items": ["About"]},
#             "/",  # put this to force next toolbar on new line
#             {
#                 "name": "yourcustomtools",
#                 "items": [
#                     # put the name of your editor.ui.addButton here
#                     "Preview",
#                     "Maximize",
#                 ],
#             },
#         ],
#         "toolbar": "YourCustomToolbarConfig",  # put selected toolbar config here
#         # 'toolbarGroups': [{ 'name': 'document', 'groups': [ 'mode', 'document', 'doctools' ] }],
#         # 'height': 291,
#         # 'width': '100%',
#         # 'filebrowserWindowHeight': 725,
#         # 'filebrowserWindowWidth': 940,
#         # 'toolbarCanCollapse': True,
#         # 'mathJaxLib': '//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js?config=TeX-AMS_HTML',
#         "tabSpaces": 4,
#         "extraPlugins": ",".join(
#             [
#                 "uploadimage",  # the upload image feature
#                 # your extra plugins here
#                 "div",
#                 "autolink",
#                 "autoembed",
#                 "embedsemantic",
#                 "autogrow",
#                 # 'devtools',
#                 "widget",
#                 "lineutils",
#                 "clipboard",
#                 "dialog",
#                 "dialogui",
#                 "elementspath",
#             ]
#         ),
#     }
# }
